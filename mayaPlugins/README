
Building plugins
================================================

    Eigen math library
        Download latest Eigen release from http://eigen.tuxfamily.org/
        Unzip
        It is not required to build or compile the library

    Set MAYA_LOCATION in environment variable
    Set EIGEN_LOCATION in environment variable (point to top level Eigen folder)

    Open plugin.sln in visual studio
    Open project properties (Alt+F7)
        Select 'General', change 'Target Name' to rename <PLUGIN_NAME>
    Build/F7
    This should produce <PLUGIN_NAME>.mll



Load plugins
================================================

    cmds.file(new=1, f=1)
    cmds.unloadPlugin(<PLUGIN_NAME>)

    # Load plugins
    cmds.loadPlugin("<PLUGIN_NAME>.mll")



PSD Setup:
================================================

    import sys
    sys.path.append('mayaPlugins/PSD')
    from psd import PoseSpaceDeformer



    # Create PSD
    psd = PoseSpaceDeformer.create('psd')
    psd = PoseSpaceDeformer('psd')

    # Add pose
    psd.addPose('pose1')
    cmds.rotate( 0, 0, 42, 'joint2', r=1 )
    psd.addPoseJoints('pose1', 'joint2')

    print psd.poseAttr('pose1')
    print psd.poseNames()
    print psd.poseWeight('pose1')

    # Update pose
    cmds.rotate( 0, 0, -21, 'joint2', r=1 )
    psd.updatePoseJoints('pose1')

    # Add new pose
    psd.addPose('pose2')
    cmds.rotate( 0, 0, 42, 'joint2', r=1 )
    psd.addPoseJoints('pose2', 'joint2')

    print psd.poseWeight('pose1')
    print psd.poseWeight('pose2')

    # Add new pose
    psd.addPose('pose3')
    cmds.rotate( 0, 42, 0, 'joint2', r=1 )
    psd.addPoseJoints('pose3', 'joint2')

    # Add joint to pose
    psd.addPoseJoints('pose3', 'joint1')
    print psd.poseJoints('pose3')

    # Delete pose
    print psd.poseNames()
    psd.deletePose('pose3')
    print psd.poseNames()

    cmds.rotate( 0, -42, 0, 'joint2', r=1 )

    # Add pose target
    psd.initPoseTarget('pose2', 'target1')
    <Edit target in viewport>
    psd.setPoseTarget()
    print psd.poseTargets('pose2')

    # Reset pose target
    psd.initPoseTarget('pose2', 'target1')
    <Edit target in viewport>
    psd.setPoseTarget()

    # Update pose target
    psd.initPoseTarget('pose2', 'target1')
    <Edit target in viewport>
    psd.updatePoseTarget()

    # Cancel pose target
    psd.initPoseTarget('pose2', 'target1')
    psd.cancelPoseTarget()

    # Add pose target
    psd.initPoseTarget('pose2', 'target2')
    <Edit target in viewport>
    psd.setPoseTarget()
    print psd.poseTargets('pose2')

    # Delete pose target
    print psd.poseTargets('pose2')
    psd.deletePoseTarget('pose2', 'target2')
    print psd.poseTargets('pose2')




RELAX Setup
================================================

    # Create deformer
    cyl = cmds.polyCylinder()[1]
    cmds.setAttr(cyl+'.subdivisionsHeight', 10)
    cmds.setAttr(cyl+'.subdivisionsCaps', 10)
    cmds.deformer(type='relaxDeformer')


